Coherent.on("ToggleUseWatcher", (_val) => {
    SimVar.g_bUseWatcher = _val;
});
var SimVar;
(function (SimVar) {
    Include.addScript("/JS/Types.js");
    RegisterViewListener("JS_LISTENER_SIMVARS");
    RegisterViewListener("JS_LISTENER_GLOBALVARS");
    RegisterViewListener("JS_LISTENER_GAMEVARS");
    SimVar.g_bUseWatcher = false;
    function GetSimVars() {
        return simvar;
    }
    function GetGlobalVars() {
        return globalvar;
    }
    function GetGameVars() {
        return gamevar;
    }
    class SimVarValue {
        constructor(_name = "", _unit = "number", _type) {
            this.__type = "SimVarValue";
            this.name = _name;
            this.type = _type;
            this.unit = _unit;
        }
    }
    SimVar.SimVarValue = SimVarValue;
    function IsReady() {
        return (GetSimVars());
    }
    SimVar.IsReady = IsReady;
    var frameCount = -1;
    var KeepSimVarValueHistory = false;
    var SimVarValueHistory = [];
    function LogSimVarValueHistory() {
        let totalInvokePerFrame = 0;
        let totalTimePerFrame = 0;
        SimVarValueHistory = SimVarValueHistory.sort((a, b) => { return (b.totalTime / b.invokes - a.totalTime / a.invokes); });
        for (let i = 0; i < SimVarValueHistory.length; i++) {
            let h = SimVarValueHistory[i];
            let timePerInvoke = h.totalTime / h.invokes;
            let invokePerFrame = h.invokes / frameCount;
            let timePerFrame = h.totalTime / frameCount;
            totalInvokePerFrame += invokePerFrame;
            totalTimePerFrame += timePerFrame;
            console.log(h.name + " called " + h.invokes.toFixed(0) + " times for " + timePerInvoke.toFixed(3) + " ms per call (total is " + h.totalTime.toFixed(3) + " ms) (worst is " + h.worstInvokeTime.toFixed(3) + " ms) (time per frame is " + timePerFrame.toFixed(3) + " ms) (invokes per frame is " + invokePerFrame.toFixed(3) + ")");
        }
        console.log("Total invokes per frame = " + totalInvokePerFrame);
        console.log("Total time per frame = " + totalTimePerFrame);
    }
    SimVar.LogSimVarValueHistory = LogSimVarValueHistory;
    function LogSimVarValueHistoryByTimePerFrame() {
        let totalInvokePerFrame = 0;
        let totalTimePerFrame = 0;
        SimVarValueHistory = SimVarValueHistory.sort((a, b) => { return (b.totalTime / frameCount - a.totalTime / frameCount); });
        for (let i = 0; i < SimVarValueHistory.length; i++) {
            let h = SimVarValueHistory[i];
            let timePerInvoke = h.totalTime / h.invokes;
            let invokePerFrame = h.invokes / frameCount;
            let timePerFrame = h.totalTime / frameCount;
            totalInvokePerFrame += invokePerFrame;
            totalTimePerFrame += timePerFrame;
            console.log(h.name + " called " + h.invokes.toFixed(0) + " times for " + timePerInvoke.toFixed(3) + " ms per call (total is " + h.totalTime.toFixed(3) + " ms) (worst is " + h.worstInvokeTime.toFixed(3) + " ms) (time per frame is " + timePerFrame.toFixed(3) + " ms) (invokes per frame is " + invokePerFrame.toFixed(3) + ")");
        }
        console.log("Total invokes per frame = " + totalInvokePerFrame);
        console.log("Total time per frame = " + totalTimePerFrame);
    }
    SimVar.LogSimVarValueHistoryByTimePerFrame = LogSimVarValueHistoryByTimePerFrame;
    var unit_latlonalt = "latlonalt";
    var unit_latlonaltpbh = "latlonaltpbh";
    var unit_pbh = "pbh";
    var unit_string = "string";
    var unit_pid_struct = "pid_struct";
    var unit_xyz = "xyz";
    var unit_bool = "bool";
    var unit_boolean = "boolean";
    var g_RegisteredWatchers = {};
    function GetRegisteredId(name, unit, dataSource) {
        var Simvars = GetSimVars();
        if (Simvars) {
            if (g_RegisteredWatchers[name] === undefined)
                g_RegisteredWatchers[name] = {};
            if (g_RegisteredWatchers[name][unit] === undefined)
                g_RegisteredWatchers[name][unit] = {};
            if (g_RegisteredWatchers[name][unit][dataSource] === undefined) {
                g_RegisteredWatchers[name][unit][dataSource] = Simvars.registerSimVarWatcher(name, unit, dataSource);
            }
            return g_RegisteredWatchers[name][unit][dataSource];
        }
        return -1;
    }
    SimVar.GetRegisteredId = GetRegisteredId;
    function GetSimVarValue(name, unit, dataSource = "") {
        engine.beginProfileEvent("GetSV:" + name);
        let t0;
        if (KeepSimVarValueHistory) {
            t0 = performance.now();
            if (frameCount === -1) {
                frameCount = 0;
                let incFrameCount = () => {
                    frameCount++;
                    requestAnimationFrame(incFrameCount);
                };
                incFrameCount();
            }
        }
        try {
            var Simvars = GetSimVars();
            if (Simvars) {
                let output;
                let askOld = !SimVar.g_bUseWatcher;
                if (SimVar.g_bUseWatcher) {
                    let registeredID = GetRegisteredId(name, unit, dataSource);
                    if (registeredID >= 0) {
                        switch (unit.toLowerCase()) {
                            case unit_latlonalt:
                                output = new LatLongAlt(Simvars.getValue_LatLongAlt(name, dataSource));
                                break;
                            case unit_latlonaltpbh:
                                output = new LatLongAltPBH(Simvars.getValue_LatLongAltPBH(name, dataSource));
                                break;
                            case unit_pbh:
                                output = new PitchBankHeading(Simvars.getValue_PBH(name, dataSource));
                                break;
                            case unit_pid_struct:
                                output = new PID_STRUCT(Simvars.getValue_PID_STRUCT(name, dataSource));
                                break;
                            case unit_xyz:
                                output = new XYZ(Simvars.getValue_XYZ(name, dataSource));
                                break;
                            case unit_string:
                                output = Simvars.getValueReg_String(registeredID);
                                break;
                            default: output = Simvars.getValueReg(registeredID);
                        }
                    }
                    else
                        askOld = true;
                }
                if (askOld) {
                    switch (unit.toLowerCase()) {
                        case unit_latlonalt:
                            output = new LatLongAlt(Simvars.getValue_LatLongAlt(name, dataSource));
                            break;
                        case unit_latlonaltpbh:
                            output = new LatLongAltPBH(Simvars.getValue_LatLongAltPBH(name, dataSource));
                            break;
                        case unit_pbh:
                            output = new PitchBankHeading(Simvars.getValue_PBH(name, dataSource));
                            break;
                        case unit_string:
                            output = Simvars.getValue_String(name, dataSource);
                            break;
                        case unit_pid_struct:
                            output = new PID_STRUCT(Simvars.getValue_PID_STRUCT(name, dataSource));
                            break;
                        case unit_xyz:
                            output = new XYZ(Simvars.getValue_XYZ(name, dataSource));
                            break;
                        default: output = Simvars.getValue(name, unit, dataSource);
                    }
                }
                if (KeepSimVarValueHistory) {
                    let t = performance.now();
                    let delay = t - t0;
                    let history = SimVarValueHistory.find(h => { return h.name === name; });
                    if (!history) {
                        history = { name: name, invokes: 0, totalTime: 0, worstInvokeTime: 0 };
                        SimVarValueHistory.push(history);
                    }
                    history.invokes++;
                    history.totalTime += delay;
                    history.worstInvokeTime = Math.max(history.worstInvokeTime, delay);
                }
                engine.endProfileEvent();
                return output;
            }
            else
                console.warn("SimVar handler is not defined (" + name + ")");
        }
        catch (error) {
            console.warn("ERROR ", error, " GetSimVarValue " + name + " unit : " + unit);
            engine.endProfileEvent();
            return null;
        }
        engine.endProfileEvent();
        return null;
    }
    SimVar.GetSimVarValue = GetSimVarValue;
    function GetSimVarValueFast(name, unit, dataSource = "") {
        var Simvars = GetSimVars();
        if (Simvars) {
            return Simvars.getValue(name, unit, dataSource);
        }
        return null;
    }
    SimVar.GetSimVarValueFast = GetSimVarValueFast;
    function GetSimVarValueFastReg(registeredID) {
        var Simvars = GetSimVars();
        if (Simvars) {
            return Simvars.getValueReg(registeredID);
        }
        return null;
    }
    SimVar.GetSimVarValueFastReg = GetSimVarValueFastReg;
    function GetSimVarValueFastRegString(registeredID) {
        var Simvars = GetSimVars();
        if (Simvars) {
            return Simvars.getValueReg_String(registeredID);
        }
        return null;
    }
    SimVar.GetSimVarValueFastRegString = GetSimVarValueFastRegString;
    class SimVarBatch {
        constructor(_simVarCount, _simVarIndex) {
            this.__Type = "SimVarBatch";
            this.wantedNames = [];
            this.wantedUnits = [];
            this.wantedTypes = [];
            this.requestID = -1;
            this.instrumentID = "";
            this.simVarCount = _simVarCount;
            this.simVarIndex = _simVarIndex;
        }
        add(_name, _unit, _type = "") {
            this.wantedNames.push(_name);
            this.wantedUnits.push(_unit);
            this.wantedTypes.push(_type);
        }
        getCount() {
            return this.simVarCount;
        }
        getIndex() {
            return this.simVarIndex;
        }
        getNames() {
            return this.wantedNames;
        }
        getUnits() {
            return this.wantedUnits;
        }
        getTypes() {
            return this.wantedTypes;
        }
    }
    SimVar.SimVarBatch = SimVarBatch;
    function GetSimVarArrayValues(simvars, callback, dataSource = "") {
        var Simvars = GetSimVars();
        if (Simvars) {
            if (SimVar.g_bUseWatcher) {
                if (simvars.requestID == -1) {
                    if (simvars.instrumentID == "")
                        simvars.instrumentID = dataSource;
                    simvars.requestID = Simvars.registerSimVarArrayWatcher(simvars, simvars.instrumentID);
                }
                Coherent.call("getArrayValuesReq", simvars.requestID).then(callback);
            }
            else {
                Coherent.call("getArrayValues", simvars.getCount(), simvars.getIndex(), simvars.getNames(), simvars.getUnits(), dataSource).then(callback);
            }
        }
    }
    SimVar.GetSimVarArrayValues = GetSimVarArrayValues;
    function SetSimVarValue(name, unit, value, dataSource = "") {
        if (value == undefined) {
            console.warn(name + " : Trying to set a null value");
            return;
        }
        try {
            var Simvars = GetSimVars();
            if (Simvars) {
                let useDefault = !SimVar.g_bUseWatcher;
                if (SimVar.g_bUseWatcher) {
                    let regID = GetRegisteredId(name, unit, dataSource);
                    if (regID >= 0) {
                        switch (unit.toLowerCase()) {
                            case "latlonalt": return Coherent.call("setValue_LatLongAlt", name, (value), dataSource);
                            case "latlonaltpbh": return Coherent.call("setValue_LatLongAltPBH", name, (value), dataSource);
                            case "pbh": return Coherent.call("setValue_PBH", name, (value), dataSource);
                            case "pid_struct": return Coherent.call("setValue_PID_STRUCT", name, (value), dataSource);
                            case "xyz": return Coherent.call("setValue_XYZ", name, (value), dataSource);
                            case "string": return Coherent.call("setValueReg_String", regID, (value));
                            case "bool":
                            case "boolean": return Coherent.call("setValueReg_Bool", regID, (!!value));
                            default:
                                return Coherent.call("setValueReg_Number", regID, value);
                        }
                    }
                    else
                        useDefault = true;
                }
                if (useDefault) {
                    switch (unit.toLowerCase()) {
                        case "latlonalt": return Coherent.call("setValue_LatLongAlt", name, (value), dataSource);
                        case "latlonaltpbh": return Coherent.call("setValue_LatLongAltPBH", name, (value), dataSource);
                        case "pbh": return Coherent.call("setValue_PBH", name, (value), dataSource);
                        case "string": return Coherent.call("setValue_String", name, (value), dataSource);
                        case "pid_struct": return Coherent.call("setValue_PID_STRUCT", name, (value), dataSource);
                        case "xyz": return Coherent.call("setValue_XYZ", name, (value), dataSource);
                        case "bool":
                        case "boolean": return Coherent.call("setValue_Bool", name, (!!value), dataSource);
                        default:
                            return Coherent.call("setValue_Number", name, unit, value, dataSource);
                    }
                }
            }
            else
                console.warn("SimVar handler is not defined");
        }
        catch (error) {
            console.warn("error SetSimVarValue " + error);
        }
        return new Promise(function (resolve, reject) {
            resolve();
        });
    }
    SimVar.SetSimVarValue = SetSimVarValue;
    var g_RegisteredGlobalVarWatchers = {};
    function GetRegisteredGlobalVarId(name, unit, dataSource) {
        var Globalvars = GetGlobalVars();
        if (Globalvars) {
            if (g_RegisteredGlobalVarWatchers[name] === undefined)
                g_RegisteredGlobalVarWatchers[name] = {};
            if (g_RegisteredGlobalVarWatchers[name][unit] === undefined)
                g_RegisteredGlobalVarWatchers[name][unit] = {};
            if (g_RegisteredGlobalVarWatchers[name][unit][dataSource] === undefined) {
                g_RegisteredGlobalVarWatchers[name][unit][dataSource] = Globalvars.registerGlobalVarWatcher(name, unit, dataSource);
            }
            return g_RegisteredGlobalVarWatchers[name][unit][dataSource];
        }
        return -1;
    }
    function GetGlobalVarValue(name, unit) {
        var Globalvars = GetGlobalVars();
        if (Globalvars) {
            if (SimVar.g_bUseWatcher) {
                let regID = GetRegisteredGlobalVarId(name, unit, "");
                if (regID >= 0) {
                    var value = Globalvars.getValueReg(regID);
                    return value;
                }
            }
            var value = Globalvars.getValue(name, unit);
            return value;
        }
        return null;
    }
    SimVar.GetGlobalVarValue = GetGlobalVarValue;
    var g_RegisteredGameVarWatchers = {};
    function GetRegisteredGameVarId(name, unit, dataSource) {
        var GameVars = GetGameVars();
        name = name.replace(/\s/g, '_');
        if (GameVars) {
            if (g_RegisteredGameVarWatchers[name] === undefined)
                g_RegisteredGameVarWatchers[name] = {};
            if (g_RegisteredGameVarWatchers[name][unit] === undefined)
                g_RegisteredGameVarWatchers[name][unit] = {};
            if (g_RegisteredGameVarWatchers[name][unit][dataSource] === undefined) {
                g_RegisteredGameVarWatchers[name][unit][dataSource] = GameVars.registerGameVarWatcher(name, unit, dataSource);
            }
            return g_RegisteredGameVarWatchers[name][unit][dataSource];
        }
        return -1;
    }
    SimVar.GetRegisteredGameVarId = GetRegisteredGameVarId;
    function GetGameVarValue(name, unit, param1 = 0, param2 = 0) {
        engine.beginProfileEvent("GetGV:" + name);
        engine.endProfileEvent();
        try {
            var Gamevars = GetGameVars();
            if (Gamevars) {
                if (SimVar.g_bUseWatcher) {
                    let regId = GetRegisteredGameVarId(name, unit, "");
                    if (regId >= 0) {
                        switch (unit.toLowerCase()) {
                            case "xyz": break;
                            case "poilist": break;
                            case "glasscockpitsettings": break;
                            case "fuellevels": break;
                            case "string": return Gamevars.getValueReg_String(regId, param1, param2);
                            default: return Gamevars.getValueReg(regId, param1, param2);
                        }
                    }
                }
                name = name.replace(/\s/g, '_');
                switch (unit.toLowerCase()) {
                    case "string": return Gamevars.getValue_String(name, param1, param2);
                    case "xyz": return new XYZ(Gamevars.getValue_XYZ(name, param1, param2));
                    case "poilist": return Gamevars.getValue_POIList(name, param1, param2);
                    case "glasscockpitsettings": return Gamevars.getValue_GlassCockpit(name, param1, param2);
                    case "fuellevels": return Gamevars.getValue_FuelLevels(name, param1, param2);
                    default: return Gamevars.getValue(name, unit, param1, param2);
                }
            }
            else
                console.warn("GameVar handler is not defined");
        }
        catch (error) {
            console.warn("ERROR GetGameVarValue " + name + " type : " + unit);
            return null;
        }
        return null;
    }
    SimVar.GetGameVarValue = GetGameVarValue;
    function GetGameVarValueFast(name, unit, param1 = 0, param2 = 0) {
        var Gamevars = GetGameVars();
        if (Gamevars) {
            return Gamevars.getValue(name, unit, param1, param2);
        }
        return null;
    }
    SimVar.GetGameVarValueFast = GetGameVarValueFast;
    function GetGameVarValueFastReg(regId, param1 = 0, param2 = 0) {
        var Gamevars = GetGameVars();
        if (Gamevars) {
            return Gamevars.getValueReg(regId, param1, param2);
        }
        return null;
    }
    SimVar.GetGameVarValueFastReg = GetGameVarValueFastReg;
    function SetGameVarValue(name, unit, value) {
        if (value == undefined) {
            console.warn(name + " : Trying to set a null value");
            return;
        }
        name = name.replace(/\s/g, '_');
        try {
            var Gamevars = GetGameVars();
            if (Gamevars) {
                switch (unit.toLowerCase()) {
                    case "xyz":
                    case "poilist":
                    case "glasscockpitsettings":
                    case "fuellevels":
                        break;
                    case "string": return Coherent.call("setGameVar_String", name, unit, value);
                    default: return Coherent.call("setGameVar_Number", name, unit, value);
                }
            }
            else
                console.warn("GameVar handler is not defined");
        }
        catch (error) {
            console.warn("error SetGameVarValue " + error);
        }
        return new Promise(function (resolve, reject) {
            resolve();
        });
    }
    SimVar.SetGameVarValue = SetGameVarValue;
})(SimVar || (SimVar = {}));
//# sourceMappingURL=simvar.js.map