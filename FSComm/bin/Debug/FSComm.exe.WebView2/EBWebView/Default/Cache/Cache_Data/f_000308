<!DOCTYPE html>
<html>

<head>
    <title>VCockpit</title>
    <meta charset="utf-8" />

    <script type="text/javascript"
        src="https://cdn.jsdelivr.net/npm/@webcomponents/html-imports@1.3.0/src/html-imports.js"></script>

    <link rel="stylesheet" href="/SCSS/common.css" />

    <script type="text/javascript" src="/JS/coherent.js"></script>
    <script type="text/javascript" src="/JS/common.js"></script>
    <script type="text/javascript" src="/JS/Types.js"></script>
    <script type="text/javascript" src="/JS/simvar.js"></script>
    <script type="text/javascript" src="/JS/avionics.js"></script>
    <script type="text/javascript" src="/JS/simplane.js"></script>
    <script type="text/javascript" src="/JS/Services/GenericDataListener.js"></script>


    <script type="text/javascript" src="/Pages/VCockpit/Instruments/Shared/BaseInstrument.js"></script>
    <script type="text/javascript" src="/Pages/VCockpit/Instruments/Shared/Utils/XMLLogic.js"></script>
    <script type="text/javascript" src="/pages/vcockpit/instruments/shared/Utils/DataReadManager.js"></script>
    <script type="text/javascript" src="/pages/vcockpit/instruments/shared/flightelements/geocalc.js"></script>
    <script type="text/javascript" src="/pages/vcockpit/instruments/shared/flightelements/flightPlan.js"></script>

    <script type="text/javascript" src="VCockpit.js"></script>
    <script type="text/javascript" src="/JS/IncludeMgr.js"></script>
    <script type="text/javascript" src="/JS/utils.js"></script>
    <script type="text/javascript" src="/JS/variables.js"></script>
    <script type="text/javascript" src="/JS/leaflet-1.7.1/leaflet.js"></script>
    <script type="text/javascript" src="/JS/leaflet-1.7.1/leaflet.rotatedMarker.js"></script>
    <link rel="stylesheet" href="/JS/leaflet-1.7.1/leaflet.orig.css" />
    <script type="text/javascript" src="/JS/leaflet_map.js"></script>
    <!-- <link rel="stylesheet" href="/SCSS/common.css" /> -->
</head>

<body style="background-color: black">

    <script>
        let instrument = null

        class FlightPlanExt extends FlightPlan {
            fillValues(data) {
                for (var i = 0; i < data.length; i++) {
                    if (!this.wayPoints[i]) {
                        this.wayPoints[i] = new WayPoint(this.instrument);
                    }
                    var wp = data[i]
                    this.wayPoints[i].SetIdent(wp.ident);
                    this.wayPoints[i].SetTypeFromEnum(wp.type);
                    this.wayPoints[i].SetICAO(wp.icao);
                    this.wayPoints[i].distanceInFP = wp.distanceInFP;
                    this.wayPoints[i].cumulativeDistanceInFP = wp.cumulativeDistanceInFP
                    this.wayPoints[i].latitudeFP = wp.latitudeFP
                    this.wayPoints[i].longitudeFP = wp.longitudeFP
                    this.wayPoints[i].bearingInFP = wp.bearingInFP


                    this.wayPoints[i].infos.icao = wp.infos.icao
                    this.wayPoints[i].infos.ident = wp.infos.ident
                    this.wayPoints[i].infos.region = wp.infos.region
                    this.wayPoints[i].infos.name = wp.infos.name
                    this.wayPoints[i].infos.city = wp.infos.city
                    this.wayPoints[i].infos.routes = wp.infos.routes
                    this.wayPoints[i].infos.timeInFP = wp.infos.timeInFP
                    this.wayPoints[i].infos.totalTimeInFP = wp.infos.totalTimeInFP
                    this.wayPoints[i].infos.etaInFP = wp.infos.etaInFP
                    this.wayPoints[i].infos.totalDistInFP = wp.infos.totalDistInFP
                    this.wayPoints[i].infos.fuelConsInFP = wp.infos.fuelConsInFP
                    this.wayPoints[i].infos.totalFuelConsInFP = wp.infos.totalFuelConsInFP
                    this.wayPoints[i].infos.airwayIdentInFP = wp.infos.airwayIdentInFP
                    this.wayPoints[i].infos.coordinates = wp.infos.coordinates
                    //this.wayPoints[i].info.//loaded = false;
                    this.wayPoints[i].infos.airways = wp.infos.airways
                    this.wayPoints[i].infos._svgElements = wp.infos._svgElements

                }
                while (this.wayPoints.length > data.length) {
                    this.wayPoints.pop();
                }
            }
        }



        class SimVarList {
            items;
            constructor() {
                this.items = {};
            }
            add(key, value) {
                this.items[key] = value;
            }
            has(key) {
                return key in this.items;
            }
            get(key) {
                return this.items[key];
            }
        }

        class MessageType {
            clientId;
            topic;
            payload;
            timestamp;
        }

        class WSConn {
            onMessage;
            onWebSocketError;
            clientId = "Client" + performance.now().toString();
            webSocket = undefined;
            connected = false;
            variables = new SimVarList();
            constructor() {
                console.log("WSConn");
            }
            connect() {
                //this.webSocket = new WebSocket("ws://192.168.1.110:5000/SimChannel");
                var url = "ws://" + document.location.host + "/SimChannel"
                this.webSocket = new WebSocket(url);
                this.webSocket.onerror = this.error.bind(this);
                this.webSocket.onmessage = this.message.bind(this);
                this.webSocket.onopen = ((e) => {
                    this.send("client/hello", "hello");
                    this.connected = true;
                }).bind(this);
                this.webSocket.onclose = ((e) => {
                    this.connected = false;
                    console.log("Websocket closed => reconnect");
                    setTimeout((() => {
                        this.connect();
                    }).bind(this), 1000);
                }).bind(this);
            }
            message(msg) {
                if (instrument) {
                    var m = JSON.parse(msg.data);

                    if (m.topic == "sim/simvar") {
                        var obj = JSON.parse(m.payload);
                        var simvar = this.variables.items[obj.simvar];
                        if (simvar) {
                            simvar.value = obj.value;
                        }
                        else {
                        }
                    }
                    else if (instrument.flightPlan && m.topic == "sim/batch") {
                        var obj = JSON.parse(m.payload)
                        if (obj.batch1 == "C_fs9gps_FlightPlanWaypointsNumber") {
                            instrument.flightPlan.fillValues(obj.data)
                            console.log(obj)
                        }
                    }
                    else if (m.topic == "sim/flightplan/waypoints") {
                        console.log(m.payload)
                    }
                }
            }
            send(topic, payload) {
                if (this.webSocket.readyState == WebSocket.OPEN) {
                    var msg = new MessageType();
                    msg.clientId = this.clientId;
                    msg.topic = topic;
                    msg.payload = payload;
                    msg.timestamp = performance.now();
                    this.webSocket.send(JSON.stringify(msg));
                }
            }
            error(e) {
                console.log("WS Error: ", e);
                if (this.onWebSocketError) {
                    document.getElementById("logo").style.display = "block";
                }
                this.webSocket.close();
            }
        }


        var FSConn = new WSConn()
        FSConn.connect()

        let data = new VCockpitPanelData();
        data.sName = "VCockpit01";
        data.vLogicalSize = new Vec2(1024, 768);
        data.vDisplaySize = new Vec2(1024, 768);
        data.daAttributes = [];
        data.daInstruments = [];
        let instrumentData = new VCockpitInstrumentData();
        instrumentData.iGUId = 0;
        instrumentData.sUrl = "NavSystems/AS1000/MFD/AS1000_MFD.html";
        instrumentData.templateName = "";
        instrumentData.vPosAndSize = { x: 160, y: 0, z: 1024, w: 768 };

        // C:\MSFS2020\Official\OneStore\asobo-aircraft-c172sp-as1000\SimObjects\Airplanes\Asobo_C172sp_AS1000\panel\panel.xml
        var xmlUrl = "/asobo-aircraft-c172sp-as1000/SimObjects/Airplanes/Asobo_C172sp_AS1000/panel/panel.xml"
        var xmlconfig = readXml(xmlUrl).documentElement.outerHTML

        data.sConfigFile = xmlconfig
        data.daInstruments.push(instrumentData);

        var globalPanelData = data

        function ReadSimVar(name, unit, dataSource = "", src = "simvar") {
            if (FSConn.connected) {
                var sv = FSConn.variables.items[name + "/" + unit]
                if (sv) {
                    return sv.value
                } else {
                    sv = { name: name, unit: unit, dataSource: dataSource, src: src, value: 0 }
                    if (unit == "GlassCockpitSettings") {
                        sv.value = { "__Type": "GlassCockpitSettings", "FuelFlow": { "__Type": "ColorRangeDisplay", "Initialized": 1, "min": 0, "max": 20, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 12 }, "FuelQuantity": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 0, "max": 24, "lowLimit": 0, "highLimit": 0, "greenStart": 5, "greenEnd": 24, "yellowStart": 1.5, "yellowEnd": 5, "redStart": 0, "redEnd": 3 }, "FuelTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "FuelPressure": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "OilPressure": { "__Type": "ColorRangeDisplay3", "Initialized": 1, "min": 0, "max": 120, "lowLimit": 20, "highLimit": 115, "lowRedStart": 0, "lowRedEnd": 20, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 50, "greenEnd": 90, "yellowStart": 0, "yellowEnd": 0, "redStart": 115, "redEnd": 120 }, "OilTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 1, "min": 100, "max": 250, "lowLimit": 100, "highLimit": 245, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 100, "greenEnd": 245, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "EGTTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 1250, "max": 1650, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CHTTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "Vacuum": { "__Type": "ColorRangeDisplay", "Initialized": 1, "min": 3.5, "max": 7, "lowLimit": 0, "highLimit": 0, "greenStart": 4.5, "greenEnd": 5.5 }, "ManifoldPressure": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "AirSpeed": { "__Type": "ColorRangeDisplay4", "Initialized": 1, "min": 0, "max": 203, "lowLimit": 0, "highLimit": 163, "whiteStart": 40, "whiteEnd": 85, "greenStart": 48, "greenEnd": 129, "yellowStart": 129, "yellowEnd": 163, "redStart": 0, "redEnd": 40 }, "Torque": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "RPM": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 0, "max": 3000, "lowLimit": 0, "highLimit": 0, "greenStart": 2100, "greenEnd": 2600, "yellowStart": 0, "yellowEnd": 0, "redStart": 2700, "redEnd": 3000 }, "TurbineNg": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "ITTEngineOff": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "ITTEngineOn": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "MainBusVoltage": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "HotBatteryBusVoltage": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "BatteryBusAmps": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "GenAltBusAmps": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CoolantLevel": { "__Type": "RangeDisplay", "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0 }, "CoolantTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "GearOilTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CabinAltitude": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "CabinAltitudeChangeRate": { "__Type": "RangeDisplay", "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0 }, "CabinPressureDiff": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "ThrottleLevels": { "__Type": "ThrottleLevelsInfo", "initialised": 0, "minValues": [0, 0, 0, 0, 0, 0], "names": ["", "", "", "", "", ""] }, "FlapsLevels": { "__Type": "FlapsLevelsInfo", "initialised": 0, "slatsAngle": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "flapsAngle": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }, "TakeOffSpeeds": { "__Type": "TakeOffSpeedsInfo", "initialised": 1, "minVal": 65, "minWeight": 0, "maxVal": 75, "maxWeight": 0 }, "Misc": { "__Type": "GlassCockpitMisc", "initialised": 1, "hasGMeter": 0 } }
                    } else {
                        sv = { name: name, unit: unit, dataSource: dataSource, src: src, value: 0 }
                    }
                    FSConn.variables.items[name + "/" + unit] = sv
                    FSConn.send("client/register/simvar", JSON.stringify(sv))
                    console.log("client/register/simvar " + JSON.stringify(sv))
                }
            }
            return 0
        }

        function GetSimVarRegId(name, unit, src = "") {
            ReadSimVar(name, unit, src)
            var v = Object.keys(FSConn.variables.items)
            for (var i = 0; i < v.length; i++) {
                if (name + "/" + unit == v[i]) {
                    return i
                }
            }
            return 0

        }

        class SimVarGetter {
            constructor(_name, _unit, _reftime) {
                this.SVTimer = -10000000;
                this.SVReg = -1;
                this.SVName = _name;
                this.SVunit = _unit;
                this.SVRefreshT = _reftime;
            }

            getVal() {
                return 0
            }
            toFixed(val) {
                return val
            }
            GetRegisteredId(name, unit, src = "") {
                return GetRegisteredId(name, unit, src)
            }
        }

        engine.beginProfileEvent = function (params) {
        }

        engine.endProfileEvent = function () {
        }

        engine.SendMessage = function (name, id) {
            var args = Array.prototype.slice.call(arguments, 2);
            var deferred = engine._ActiveRequests[id];
            delete engine._ActiveRequests[id];
            var call = function () {
                var mock = engine._mocks[name];
                if (mock !== undefined) {
                    deferred.resolve(mock.apply(engine, args));
                }
            };
            window.setTimeout(call, 16);
        };

        engine._RequestId = 0
        engine.call = function () {
            engine._RequestId++;
            var id = engine._RequestId;
            var messageArguments = Array.prototype.slice.call(arguments);
            messageArguments.splice(1, 0, id);

            var promise = new Promise(function (resolve, reject) {
                engine._ActiveRequests[id] = {
                    resolve: resolve,
                    reject: reject,
                };
                engine.SendMessage.apply(engine, messageArguments);
            });
            return promise;
        };
        var simvar = {}
        var gamevar = simvar
        var globalvar = {}

        simvar.registerSimVarWatcher = function (name, unit, dataSource) {
            var sv = { "id": FSConn.variables.length, "src": "SimVar", "name": name, "unit": unit, "dataSource": dataSource, "value": 0, "lazy": 2 }
            variables.push()
        }
        simvar.registerGameVarWatcher = function (name, unit, dataSource) {
            var sv = { "id": FSConn.variables.length, "src": "SimVar", "name": name, "unit": unit, "dataSource": dataSource, "value": 0, "lazy": 2 }
            variables.push()
        }
        simvar.getValueReg = function (id) {
            var v = Object.keys(FSConn.variables.items)
            return FSConn.variables.get(v[id]).value
        }
        simvar.getValue = function (name, unit, param1, param2) {
            //console.log("simvar.getValue()")
            return ReadSimVar(name, unit, param1)
        }
        simvar.getValueReg_String = function (id) {
            var v = Object.keys(FSConn.variables.items)
            return FSConn.variables.get(v[id]).value
            var sv = FSConn.variables[id]
            return sv.value
        }

        SimVar.GetSimVarValue = function (name, unit, dataSource = "") {
            return ReadSimVar(name, unit, dataSource, "simvar")
        }

        SimVar.GetGameVarValue = function (name, unit, dataSource = "") {
            return ReadSimVar(name, unit, dataSource, "gamevar")
        }

        SimVar.GetGlobalVarValue = function (name, unit, dataSource = "") {
            return ReadSimVar(name, unit, dataSource, "globalvar")
        }

        SimVar.GetSimVarArrayValues = function (waypointsBatch, func) {
            console.log(waypointsBatch)
        }


        var requestId = 0
        SimVar.SetSimVarValue = function (name, unit, value) {

            FSConn.send("client/simvar/set", JSON.stringify({ vname: name, vunit: unit, vval: value, dataSource: "", rid: requestId++ }));
            return new Promise(function (resolve, reject) {
                resolve();
            });
        }

        SimVar.GetRegisteredId = function (name, unit, value) {
            return GetSimVarRegId(name, unit, value)
        }

        SimVar.GetRegisteredGameVarId = function (name, unit, value) {
            return GetSimVarRegId(name, unit, value)
        }

        SimVar.registerSimVarWatcher = function () {
        }
        simvar.registerGameVarWatcher = function (name, unit, dataSource) {
        }

    </script>

    <vcockpit-panel id="panel"></vcockpit-panel>
    <div id="vignettage"
        style="pointer-events:none; border:12px solid white; position:absolute; display:none; top:0; left:0; width:100%; height:100%; z-index:5">
    </div>
    <img id="virtualmouse" src="/Icons/Mouse.svg"
        style="pointer-events:none; position:absolute; display:none; top:0; left:0; width:60px; height:60px; z-index:5" />
    <!--<div id="debugmouse" style="pointer-events:none; background-color:red; position:absolute; display:none; top:0; left:0; width:15px; height:15px; z-index:5"></div>-->


    <script>

        var instrumentSelector = "Electricity"

        function start() {
            var electricity = document.getElementById(instrumentSelector)
            var gauges = document.querySelector("glasscockpit-xmlcirculargauge");
            if (electricity == null) {
                setTimeout(() => {
                    start()
                }, 1000);
                return
            }

            instrument = document.querySelector("as1000-mfd-element")

            var gauges = document.querySelector("glasscockpit-xmlcirculargauge");
            if (gauges) {
                for (var i = 0; i < gauges.length; i++) {
                    var g = gauges[i]
                    gauges.setAttribute("State", "none")
                }
            }


            instrument.flightPlan = new FlightPlanExt(instrument, instrument.FlightPlanManager)


            document.body.style.width = "unset"
            document.body.style.height = "unset"

            BaseInstrument.allInstrumentsLoaded = true
            instrument.hasBeenOff = true

            var elem = document.querySelector("glasscockpit-highlight");
            if (elem) {
                elem.style.width = "unset"
                elem.style.height = "unset"
            }

            elem = document.getElementById("Validate")
            if (elem) {
                elem.style.height = "0px"
            }

            elem = document.getElementById("Electricity")
            elem.setAttribute("state", "on")

            elem = document.getElementById("Map")
            if (elem) {
                elem.innerHTML = '<div id="LeafletMap" style="display: block; left: 0%; top: 0%; width:100%; height:99%;background-color: black;"></div>'
                elem.innerHTML += '<glasscockpit-wind-data id="WindData"></glasscockpit-wind-data>'
                var map = new LeafletMap("LeafletMap")
                setInterval((() => {
                    map.onUpdate(1)
                    if (instrument) {
                        if (instrument.flightPlan) {
                            map.onUpdateFlightPlan(instrument.flightPlan)
                        }
                    }
                }).bind(map)
                    , 100)
                var wind = document.getElementById("WindData")
                if (wind) {
                    wind.style.zIndex = 900
                }
            }

            //var instrumentID = "as1000-mfd-element"
            //var instrument = document.querySelector(instrumentID)

            for (var j = 0; j < instrument.IndependentsElements.length; j++) {
                elem = instrument.IndependentsElements[j]
                if (elem.name == "SoftKeys") {
                    for (var i = 1; i <= 12; i++) {
                        var key = document.getElementById("Key" + i)
                        key.style.cursor = "pointer"
                        key.softkeys = elem.element
                        // {"vname":"H:AS1000_PFD_SOFTKEYS_6","vunit":"number", "vval": 0}
                        key.softkey1 = i //"SOFTKEYS_" + i
                        key.softkey2 = "SOFTKEYS_" + i
                        key.onclick = function (e) {

                            if (this.innerText == "REFRESH") {
                                var e = document.getElementById("Electricity")
                                e.setAttribute("state", "on")
                                SimVar.SetSimVarValue("H:AS1000_MFD_SOFTKEYS_" + this.softkey1, "number", 0)
                                //mqtt_client.client.send("sim/simvar/set", JSON.stringify({ vname: "H:AS1000_MFD_SOFTKEYS_" + this.softkey1, vunit: "number", vval: 0 }))
                            } else {
                                this.softkeys.onEvent(this.softkey2)
                            }

                        }
                    }
                }
            }
        }

        start()




    </script>

</body>

</html>