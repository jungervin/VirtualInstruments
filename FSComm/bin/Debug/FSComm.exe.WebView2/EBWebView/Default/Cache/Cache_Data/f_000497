<!DOCTYPE html>
<html>

<head>
    <title>VCockpit</title>
    <meta charset="utf-8" />

    <script type="text/javascript"
        src="https://cdn.jsdelivr.net/npm/@webcomponents/html-imports@1.3.0/src/html-imports.js"></script>

    <!-- <link rel="stylesheet" href="/SCSS/common.css" /> -->

    <script type="text/javascript" src="/JS/coherent.js"></script>
    <script type="text/javascript" src="/JS/common.js"></script>
    <script type="text/javascript" src="/JS/Types.js"></script>
    <script type="text/javascript" src="/JS/simvar.js"></script>
    <script type="text/javascript" src="/JS/avionics.js"></script>
    <script type="text/javascript" src="/JS/simplane.js"></script>
    <script type="text/javascript" src="/JS/Services/GenericDataListener.js"></script>


    <script type="text/javascript" src="/Pages/VCockpit/Instruments/Shared/BaseInstrument.js"></script>
    <script type="text/javascript" src="/Pages/VCockpit/Instruments/Shared/Utils/XMLLogic.js"></script>

    <script type="text/javascript" src="VCockpit.js"></script>
    <script type="text/javascript" src="/JS/IncludeMgr.js"></script>
    <script type="text/javascript" src="/JS/variables.js"></script>
    <script type="text/javascript" src="/JS/utils.js"></script>
    <script type="text/javascript" src="/JS/leaflet-1.7.1/leaflet.js"></script>
    <script type="text/javascript" src="/JS/leaflet-1.7.1/leaflet.rotatedMarker.js"></script>
    <link rel="stylesheet" href="/JS/leaflet-1.7.1/leaflet.orig.css" />
    <script type="text/javascript" src="/JS/leaflet_map.js"></script>

    <style>
        /* body {
    font-family: roboto-bold;
    margin: 0;
    color: whitesmoke;
    background-color: #1a1d2100;
    overflow: hidden;
    transform: scale(1, 1); transform-origin: 0 0;
} */
    </style>
</head>

<!-- <body style="transform: scale(1, 1); transform-origin: 0 0;background-color: black"> -->

<body style="background-color: black">
    <!-- ez lesz az -->
    <script>
        // var globalPanelData = {}

        // globalPanelData.sName = "Test 1"
        // globalPanelData.daAttributes = []


        // //var url = VCockpitPanel.instrumentRoot + instrument.sUrl;
        // globalPanelData.daInstruments = [

        // ]

        class SimVarList {
            items;
            constructor() {
                this.items = {};
            }
            add(key, value) {
                this.items[key] = value;
            }
            has(key) {
                return key in this.items;
            }
            get(key) {
                return this.items[key];
            }
        }
        class MessageType {
            clientId;
            topic;
            payload;
            timestamp;
        }

        class WSConn {
            onMessage;
            onWebSocketError;
            clientId = "Client" + performance.now().toString();
            webSocket = undefined;
            connected = false;
            variables = new SimVarList();
            constructor() {
                console.log("WSConn");
            }
            connect() {
                this.webSocket = new WebSocket("ws://192.168.1.110:5000/SimChannel");
                this.webSocket.onerror = this.error.bind(this);
                this.webSocket.onmessage = this.message.bind(this);
                this.webSocket.onopen = ((e) => {
                    this.send("client/hello", "hello");
                    this.connected = true;
                }).bind(this);
                this.webSocket.onclose = ((e) => {
                    this.connected = false;
                    console.log("Websocket closed => reconnect");
                    setTimeout((() => {
                        this.connect();
                    }).bind(this), 1000);
                }).bind(this);
            }
            message(msg) {
                var m = JSON.parse(msg.data);

                if (m.topic == "sim/simvar") {
                    var obj = JSON.parse(m.payload);
                    var simvar = this.variables.items[obj.simvar];
                    if (simvar) {
                        simvar.value = obj.value;
                    }
                    else {
                    }
                }

                // if (this.onMessage) {
                //     try {
                //         var msg = JSON.parse(m.data);
                //         {
                //             this.onMessage(msg);
                //         }
                //     }
                //     catch (e) {
                //         console.log(e);
                //     }
                // }
            }
            send(topic, payload) {
                if (this.webSocket.readyState == WebSocket.OPEN) {
                    var msg = new MessageType();
                    msg.clientId = this.clientId;
                    msg.topic = topic;
                    msg.payload = payload;
                    msg.timestamp = performance.now();
                    this.webSocket.send(JSON.stringify(msg));
                }
            }
            error(e) {
                console.log("WS Error: ", e);
                if (this.onWebSocketError) {
                    document.getElementById("logo").style.display = "block";
                }
                this.webSocket.close();
            }
        }


        var FSConn = new WSConn()
        FSConn.connect()

        let data = new VCockpitPanelData();
        data.sName = "VCockpit01";
        var w = 512
        var h = 79
        data.vLogicalSize = new Vec2(w, h);
        data.vDisplaySize = new Vec2(w, h);
        data.daAttributes = [];
        data.daInstruments = [];
        let instrument = new VCockpitInstrumentData();
        instrument.iGUId = 0;
        //C:\MSFS2020\Official\OneStore\asobo-vcockpits-instruments-navsystems\html_ui\Pages\VCockpit\Instruments\NavSystems\GPS
        instrument.sUrl = "NavSystems/GPS/AS530/AS530.html";
        instrument.sUrl = "Generic/Radios/KR87/KR87.html"
        // C:\MSFS2020\Official\OneStore\workingtitle-instruments-g1000\html_ui\Pages\VCockpit\Instruments\NavSystems\WTG1000\PFD
        //instrument.sUrl = "NavSystems/WTG1000/PFD/WTG1000_PFD.html";

        var xmlUrl = "/asobo-aircraft-c172sp-as1000/SimObjects/Airplanes/Asobo_C172sp_AS1000/panel/panel.xml"

        var xmlconfig = readXml(xmlUrl).documentElement.outerHTML
        data.sConfigFile = xmlconfig

        instrument.templateName = "";
        instrument.vPosAndSize = { x: 43, y: 0, z: w, w: h };
        data.daInstruments.push(instrument);

        var globalPanelData = data
        //Coherent.trigger("ShowVCockpitPanel", data);
        //setTimeout(() => { Coherent.trigger("OnAllInstrumentsLoaded"); }, 5000);

        //    { "id": 179, "src": "GameVar", "name": "", "unit": "GlassCockpitSettings", "dataSource": "", "value": { "__Type": "GlassCockpitSettings", "FuelFlow": { "__Type": "ColorRangeDisplay", "Initialized": 1, "min": 0, "max": 20, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 12 }, "FuelQuantity": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 0, "max": 24, "lowLimit": 0, "highLimit": 0, "greenStart": 5, "greenEnd": 24, "yellowStart": 1.5, "yellowEnd": 5, "redStart": 0, "redEnd": 3 }, "FuelTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "FuelPressure": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "OilPressure": { "__Type": "ColorRangeDisplay3", "Initialized": 1, "min": 0, "max": 120, "lowLimit": 20, "highLimit": 115, "lowRedStart": 0, "lowRedEnd": 20, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 50, "greenEnd": 90, "yellowStart": 0, "yellowEnd": 0, "redStart": 115, "redEnd": 120 }, "OilTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 1, "min": 100, "max": 250, "lowLimit": 100, "highLimit": 245, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 100, "greenEnd": 245, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "EGTTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 1250, "max": 1650, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CHTTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "Vacuum": { "__Type": "ColorRangeDisplay", "Initialized": 1, "min": 3.5, "max": 7, "lowLimit": 0, "highLimit": 0, "greenStart": 4.5, "greenEnd": 5.5 }, "ManifoldPressure": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "AirSpeed": { "__Type": "ColorRangeDisplay4", "Initialized": 1, "min": 0, "max": 203, "lowLimit": 0, "highLimit": 163, "whiteStart": 40, "whiteEnd": 85, "greenStart": 48, "greenEnd": 129, "yellowStart": 129, "yellowEnd": 163, "redStart": 0, "redEnd": 40 }, "Torque": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "RPM": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 0, "max": 3000, "lowLimit": 0, "highLimit": 0, "greenStart": 2100, "greenEnd": 2600, "yellowStart": 0, "yellowEnd": 0, "redStart": 2700, "redEnd": 3000 }, "TurbineNg": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "ITTEngineOff": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "ITTEngineOn": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "MainBusVoltage": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "HotBatteryBusVoltage": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "BatteryBusAmps": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "GenAltBusAmps": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CoolantLevel": { "__Type": "RangeDisplay", "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0 }, "CoolantTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "GearOilTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CabinAltitude": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "CabinAltitudeChangeRate": { "__Type": "RangeDisplay", "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0 }, "CabinPressureDiff": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "ThrottleLevels": { "__Type": "ThrottleLevelsInfo", "initialised": 0, "minValues": [0, 0, 0, 0, 0, 0], "names": ["", "", "", "", "", ""] }, "FlapsLevels": { "__Type": "FlapsLevelsInfo", "initialised": 0, "slatsAngle": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "flapsAngle": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }, "TakeOffSpeeds": { "__Type": "TakeOffSpeedsInfo", "initialised": 1, "minVal": 65, "minWeight": 0, "maxVal": 75, "maxWeight": 0 }, "Misc": { "__Type": "GlassCockpitMisc", "initialised": 1, "hasGMeter": 0 } } },

        function ReadSimVar(name, unit, dataSource = "", src = "simvar") {
            // for (var i = 0; i < variables.length; i++) {
            //     var sv = variables[i]
            //     if (sv.name == name && sv.unit == unit) {
            //         return sv.value
            //     }
            // }
            // return 0

            if (FSConn.connected) {
                var sv = FSConn.variables.items[name + "/" + unit]
                if (sv) {
                    return sv.value
                } else {
                    sv = { name: name, unit: unit, dataSource: dataSource, src: src, value: 0 }
                    if (unit == "GlassCockpitSettings") {
                        sv.value = { "__Type": "GlassCockpitSettings", "FuelFlow": { "__Type": "ColorRangeDisplay", "Initialized": 1, "min": 0, "max": 20, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 12 }, "FuelQuantity": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 0, "max": 24, "lowLimit": 0, "highLimit": 0, "greenStart": 5, "greenEnd": 24, "yellowStart": 1.5, "yellowEnd": 5, "redStart": 0, "redEnd": 3 }, "FuelTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "FuelPressure": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "OilPressure": { "__Type": "ColorRangeDisplay3", "Initialized": 1, "min": 0, "max": 120, "lowLimit": 20, "highLimit": 115, "lowRedStart": 0, "lowRedEnd": 20, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 50, "greenEnd": 90, "yellowStart": 0, "yellowEnd": 0, "redStart": 115, "redEnd": 120 }, "OilTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 1, "min": 100, "max": 250, "lowLimit": 100, "highLimit": 245, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 100, "greenEnd": 245, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "EGTTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 1250, "max": 1650, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CHTTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "Vacuum": { "__Type": "ColorRangeDisplay", "Initialized": 1, "min": 3.5, "max": 7, "lowLimit": 0, "highLimit": 0, "greenStart": 4.5, "greenEnd": 5.5 }, "ManifoldPressure": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "AirSpeed": { "__Type": "ColorRangeDisplay4", "Initialized": 1, "min": 0, "max": 203, "lowLimit": 0, "highLimit": 163, "whiteStart": 40, "whiteEnd": 85, "greenStart": 48, "greenEnd": 129, "yellowStart": 129, "yellowEnd": 163, "redStart": 0, "redEnd": 40 }, "Torque": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "RPM": { "__Type": "ColorRangeDisplay2", "Initialized": 1, "min": 0, "max": 3000, "lowLimit": 0, "highLimit": 0, "greenStart": 2100, "greenEnd": 2600, "yellowStart": 0, "yellowEnd": 0, "redStart": 2700, "redEnd": 3000 }, "TurbineNg": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "ITTEngineOff": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "ITTEngineOn": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "MainBusVoltage": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "HotBatteryBusVoltage": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "BatteryBusAmps": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "GenAltBusAmps": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CoolantLevel": { "__Type": "RangeDisplay", "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0 }, "CoolantTemperature": { "__Type": "ColorRangeDisplay3", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "lowRedStart": 0, "lowRedEnd": 0, "lowYellowStart": 0, "lowYellowEnd": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "GearOilTemperature": { "__Type": "ColorRangeDisplay2", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0, "yellowStart": 0, "yellowEnd": 0, "redStart": 0, "redEnd": 0 }, "CabinAltitude": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "CabinAltitudeChangeRate": { "__Type": "RangeDisplay", "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0 }, "CabinPressureDiff": { "__Type": "ColorRangeDisplay", "Initialized": 0, "min": 0, "max": 0, "lowLimit": 0, "highLimit": 0, "greenStart": 0, "greenEnd": 0 }, "ThrottleLevels": { "__Type": "ThrottleLevelsInfo", "initialised": 0, "minValues": [0, 0, 0, 0, 0, 0], "names": ["", "", "", "", "", ""] }, "FlapsLevels": { "__Type": "FlapsLevelsInfo", "initialised": 0, "slatsAngle": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "flapsAngle": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }, "TakeOffSpeeds": { "__Type": "TakeOffSpeedsInfo", "initialised": 1, "minVal": 65, "minWeight": 0, "maxVal": 75, "maxWeight": 0 }, "Misc": { "__Type": "GlassCockpitMisc", "initialised": 1, "hasGMeter": 0 } }

                    }

                    else {

                        sv = { name: name, unit: unit, dataSource: dataSource, src: src, value: 0 }
                    }
                    FSConn.variables.items[name + "/" + unit] = sv
                    FSConn.send("client/register/simvar", JSON.stringify(sv))
                    console.log("client/register/simvar " + JSON.stringify(sv))
                }
            }
            return 0
        }

        // SimVar.GetRegisteredId(this.SVName, this.SVunit, "");
        function GetSimVarRegId(name, unit, src = "") {
            ReadSimVar(name, unit, src)
            var v = Object.keys(FSConn.variables.items)


            for (var i = 0; i < v.length; i++) {
                //var sv = variables[i]
                if (name + "/" + unit == v[i]) {
                    return i
                }
            }
            return 0

        }
        class SimVarGetter {
            // constructor(name, unit, timer) {
            //     console.log("SimVarGetter:", name, unit)
            // }

            constructor(_name, _unit, _reftime) {
                this.SVTimer = -10000000;
                this.SVReg = -1;
                this.SVName = _name;
                this.SVunit = _unit;
                this.SVRefreshT = _reftime;
            }

            getVal() {
                return 0
            }
            toFixed(val) {
                return val
            }
            GetRegisteredId(name, unit, src = "") {
                return GetRegisteredId(name, unit, src)
            }

        }

        engine.beginProfileEvent = function (params) {
        }

        engine.endProfileEvent = function () {
        }

        engine.SendMessage = function (name, id) {
            var args = Array.prototype.slice.call(arguments, 2);
            var deferred = engine._ActiveRequests[id];

            delete engine._ActiveRequests[id];
            var call = function () {
                var mock = engine._mocks[name];

                if (mock !== undefined) {
                    deferred.resolve(mock.apply(engine, args));
                }
            };

            window.setTimeout(call, 16);
        };

        var simvar = {}
        var gamevar = simvar
        var globalvar = {}
        simvar.registerSimVarWatcher = function (name, unit, dataSource) {
            var sv = { "id": FSConn.variables.length, "src": "SimVar", "name": name, "unit": unit, "dataSource": dataSource, "value": 0, "lazy": 2 }
            variables.push()

        }
        simvar.registerGameVarWatcher = function (name, unit, dataSource) {
            var sv = { "id": FSConn.variables.length, "src": "SimVar", "name": name, "unit": unit, "dataSource": dataSource, "value": 0, "lazy": 2 }
            variables.push()

        }
        simvar.getValueReg = function (id) {
            var v = Object.keys(FSConn.variables.items)
            return FSConn.variables.get(v[id]).value
        }

        simvar.getValue = function (name, unit, param1, param2) {
            //console.log("simvar.getValue()")
            return ReadSimVar(name, unit, param1)
        }

        simvar.getValueReg_String = function (id) {
            var v = Object.keys(FSConn.variables.items)
            return FSConn.variables.get(v[id]).value
            var sv = FSConn.variables[id]
            return sv.value
        }


        SimVar.GetSimVarValue = function (name, unit, dataSource = "") {
            return ReadSimVar(name, unit, dataSource, "simvar")
            // for(var i = 0; i < variables.length; i++) {
            //     var sv = variables[i]
            //     if(sv.name == name && sv.unit == unit) {
            //         return sv.value
            //     }
            // }
            // return 0
        }

        SimVar.GetGameVarValue = function (name, unit, dataSource = "") {
            return ReadSimVar(name, unit, dataSource, "gamevar")
            // for(var i = 0; i < variables.length; i++) {
            //     var sv = variables[i]
            //     if(sv.name == name && sv.unit == unit) {
            //         return sv.value
            //     }
            // }
            // return 0
        }

        SimVar.GetGlobalVarValue = function (name, unit, dataSource = "") {
            return ReadSimVar(name, unit, dataSource, "globalvar")
            // for(var i = 0; i < variables.length; i++) {
            //     var sv = variables[i]
            //     if(sv.name == name && sv.unit == unit) {
            //         return sv.value
            //     }
            // }
            // return 0
        }

        var requestId = 0
        SimVar.SetSimVarValue = function (name, unit, value) {

            //FSConn.send("sim/simvar/set")
            FSConn.send("client/simvar/set", JSON.stringify({ vname: name, vunit: unit, vval: value, dataSource: "", rid: requestId++ }));

            return new Promise(function (resolve, reject) {
                resolve();
            });
        }

        SimVar.GetRegisteredId = function (name, unit, value) {
            return GetSimVarRegId(name, unit, value)
        }

        SimVar.GetRegisteredGameVarId = function (name, unit, value) {
            return GetSimVarRegId(name, unit, value)
        }

        function GetSimVarArrayValues(simvars, callback, dataSource = "") {
            // var Simvars = GetSimVars();
            // if (Simvars) 
            {
                if (SimVar.g_bUseWatcher) {
                    if (simvars.requestID == -1) {
                        if (simvars.instrumentID == "")
                            simvars.instrumentID = dataSource;
                        simvars.requestID = Simvars.registerSimVarArrayWatcher(simvars, simvars.instrumentID);
                    }
                    Coherent.call("getArrayValuesReq", simvars.requestID).then(callback);
                }
                else {

                    var b = SimVarBatchObjects[simvars.simVarCount + "/" + simvars.simVarIndex]

                    Coherent.call("getArrayValues", simvars.getCount(), simvars.getIndex(), simvars.getNames(), simvars.getUnits(), dataSource)
                        .then(callback);
                }
            }
        }
        SimVar.GetSimVarArrayValues = GetSimVarArrayValues;
        // SimVar.SimVarBatch = function 

        // SimVar.SimVarBatch.add = function() {

        // }
        SimVar.registerSimVarWatcher = function () {

        }
        simvar.registerGameVarWatcher = function (name, unit, dataSource) {

        }

        class SimVarBatch {
            constructor(_simVarCount, _simVarIndex) {
                this.__Type = "SimVarBatch";
                this.wantedNames = [];
                this.wantedUnits = [];
                this.wantedTypes = [];
                this.requestID = -1;
                this.instrumentID = "";
                this.simVarCount = _simVarCount;
                this.simVarIndex = _simVarIndex;
            }
            add(_name, _unit, _type = "") {
                this.wantedNames.push(_name);
                this.wantedUnits.push(_unit);
                this.wantedTypes.push(_type);
            }
            getCount() {
                return this.simVarCount;
            }
            getIndex() {
                return this.simVarIndex;
            }
            getNames() {
                return this.wantedNames;
            }
            getUnits() {
                return this.wantedUnits;
            }
            getTypes() {
                return this.wantedTypes;
            }
        }

        var SimVarBatchObjects = {}

        class SimVarBatchExt extends SimVarBatch {
            constructor(_simVarCount, _simVarIndex) {
                super(_simVarCount, _simVarIndex)

                SimVarBatchObjects[_simVarCount + "/" + _simVarIndex] = this
            }
        }
        SimVar.SimVarBatch = SimVarBatchExt;

    </script>



    <vcockpit-panel id="panel"></vcockpit-panel>
    <div id="vignettage"
        style="pointer-events:none; border:12px solid white; position:absolute; display:none; top:0; left:0; width:100%; height:100%; z-index:5">
    </div>
    <img id="virtualmouse" src="/Icons/Mouse.svg"
        style="pointer-events:none; position:absolute; display:none; top:0; left:0; width:60px; height:60px; z-index:5" />
    <!--<div id="debugmouse" style="pointer-events:none; background-color:red; position:absolute; display:none; top:0; left:0; width:15px; height:15px; z-index:5"></div>-->


    <script>
        // var panel = document.getElementById("panel")
        // panel.load(globalPanelData)
        // BaseInstrument.allInstrumentsLoaded = true

        var instrumentSelector = "Electricity"
        function start() {
            var instrument = document.getElementById(instrumentSelector)
            if (instrument == null) {

                setTimeout(() => {
                    start()
                }, 1000);
                return
            }


            document.body.style.width = "unset"
            document.body.style.height = "unset"

            BaseInstrument.allInstrumentsLoaded = true
            instrument.hasBeenOff = true

            var elem = document.querySelector("glasscockpit-highlight");
            if (elem) {
                elem.style.width = "unset"
                elem.style.height = "unset"
            }

            elem = document.getElementById("Electricity")
            elem.setAttribute("state", "on")

            function diffAndSetAttribute(_element, _attribute, _newValue) {
                if (_element && _element.getAttribute(_attribute) != _newValue) {
                    _element.setAttribute(_attribute, _newValue);
                }
            }



        }

        start()




    </script>

</body>

</html>